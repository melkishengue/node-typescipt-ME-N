# all variables used in this file are defined in the .env file
version: "2.2"
services:
  node-app-0:
    restart: always
    build: ./backend/server
    links:
      - ${DB_HOST}
    depends_on:
      - ${DB_HOST}
    ports:
      - "8088:3000"
    environment:
      WAIT_HOSTS: ${DB_HOST}:${DB_PORT}
      WAIT_HOSTS_TIMEOUT: 1000
      ROLE: MASTER
      HOST: ${CONTAINER_NAME_1}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      SERVER_PORT: ${SERVER_PORT}
      NODE_ENV: ${NODE_ENV}
      SERVER_HOST_SEARCH: ${SERVER_HOST_SEARCH}
      SERVER_PORT_SEARCH: ${SERVER_PORT_SEARCH}
    labels:
      - "traefik.frontend.rule=Host:${HOST_WEB_SERVER}"
      - "traefik.backend=webserver.backend"
      - "traefik.passHostHeader=true"
      - "traefik.enable=true"
      - "traefik.port=3000"
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  search-microservice:
    restart: always
    build: ./backend/search-service
    links:
      - ${DB_HOST}
    depends_on:
      - ${DB_HOST}
    ports:
      - "8002:3000"
    environment:
      WAIT_HOSTS: ${DB_HOST}:${DB_PORT}
      WAIT_HOSTS_TIMEOUT: 1000
      HOST: ${CONTAINER_NAME_SEARCH}
      DB_HOST_SEARCH: ${DB_HOST_SEARCH}
      DB_PORT_SEARCH: ${DB_PORT_SEARCH}
      DB_NAME_SEARCH: ${DB_NAME_SEARCH}
      DB_USER_SEARCH: ${DB_USER_SEARCH}
      DB_PASS_SEARCH: ${DB_PASS_SEARCH}
      SERVER_PORT_SEARCH: ${SERVER_PORT_SEARCH}
      NODE_ENV: ${NODE_ENV}
    labels:
      - "traefik.frontend.rule=${HOST_SEARCH_MICROSERVICE}"
      - "traefik.backend=search-ms.backend"
      - "traefik.passHostHeader=true"
      - "traefik.enable=true"
      - "traefik.port=3000"
  frontend:
    container_name: ${CONTAINER_NAME_FRONTEND}
    build: ./frontend
    ports:
      # DEV: the port inside and outside must be the same.
      # webpack dev server hot reloading tries to connect directly to the port
      # inside the container (not possible if not the same port)
      - '9000:9000'
    labels:
      - "traefik.frontend.rule=${HOST_WEB_FRONTEND}"
      - "traefik.backend=frontend.backend"
      - "traefik.passHostHeader=true"
      - "traefik.enable=true"
      - "traefik.port=9000"
  mongo:
    container_name: ${DB_HOST}
    image: mongo
    user: mongodb
    volumes:
      - node-ts-app-volume:/data/db
    ports:
      - "${DB_PORT}:${DB_PORT}"
    command: mongod --smallfiles #  --replSet rs0
    ports:
      - "27017:27017"
    labels:
      - "traefik.backend=mongo.backend"
      - "traefik.passHostHeader=true"
      - "traefik.enable=true"
      - "traefik.port=27017"
      - "traefik.frontend.rule=Host:mongo.localhost"
  mongo-seed:
    build: 
      context: ./backend/docker/db-seed
      dockerfile: Dockerfile
    environment:
      WAIT_HOSTS: ${DB_HOST}:${DB_PORT}
      WAIT_HOSTS_TIMEOUT: 1000
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    depends_on:
      - ${DB_HOST}
    links:
      - ${DB_HOST}
  # loadbalancer:
  #   build: ./backend/docker/nginx
  #   tty: true
  #   links:
  #     - ${CONTAINER_NAME_SEARCH}
  #     - frontend
  #   ports:
  #     - '8080:8080'
  #     - '8081:8081'
  #   depends_on:
  #     - ${CONTAINER_NAME_SEARCH}
  #     - frontend
volumes:
  node-ts-app-volume:
    external: true