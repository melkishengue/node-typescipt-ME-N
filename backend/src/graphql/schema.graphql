type imdbType {
    id: String
    rating: Int
    votes: Int
}

type tomatoType {
    meter: Int
    image: String
    rating: Int
    reviews: Int
    fresh: Int
    consensus: String
    userMeter: Int
    userRating: Int
    userReviews: Int
}

type awardsType {
    wins: Int
    nominations: Int
    text: String
    type: String

}

type movieDetails {
    _id: ID!
    # graphql cannot parse mongoose ObjectId. 
    # I add this field that is mapped to _id. See mongoose models 
    # id: String
    year: Int
    title: String
    rated: String
    released: String
    runtime: Int
    countries: [String]
    genres: [String]
    director: String
    writers: [String]
    actors: [String]
    plot: String
    poster: String
    imdb: imdbType
    tomato: tomatoType
    metacritic: Int
    awards: awardsType
}

type Movie {
    _id: ID!
    # graphql cannot parse mongoose ObjectId. 
    # I add this field that is mapped to _id. See mongoose models 
    # id: String
    title: String
    year: String
    imdb: String
    details: [movieDetails]
}

type Review {
    _id: ID!
    rating: Float
    date: String
    reviewer: String
    text: String
}

type Query {
    movies: [Movie]
    reviews: [Review]
}

type Mutation {
    createMovie(title: String, year: String, imdb: String, type: String): Movie
    createReview(rating: Float, date: String, reviewer: String, text: String): Review
} 